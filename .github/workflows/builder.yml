name: Builder
on: [push, pull_request]
env:
  MYSQL_DATABASE: doggiedb
  MYSQL_USERNAME: doggiedb
  MYSQL_PASSWORD: doggiedb
  MYSQL_SSLMODE: none
  POSTGRES_DATABASE: doggiedb
  POSTGRES_USERNAME: doggiedb
  POSTGRES_PASSWORD: doggiedb
  MONGO_DATABASE: doggiedb
  MONGO_USERNAME: doggiedb
  MONGO_PASSWORD: doggiedb
jobs:
  macos:
    runs-on: macOS-latest
    strategy:
      fail-fast: false
      matrix:
        name: [macOS, macOS(SwiftPM)]
        formula: 
          - mysql@8.0
          - mysql@5.7
          - mariadb
        include:
          - name: macOS
            use_xcodebuild: true
            sdk: macosx
            destination: 'platform=macOS'
            enable_codecov: true
          - name: macOS(SwiftPM)
            use_xcodebuild: false
          - username: root
          - formula: mariadb
            username: runner
    env:
      use_xcodebuild: ${{ matrix.use_xcodebuild }}
      sdk: ${{ matrix.sdk }}
      destination: ${{ matrix.destination }}
      enable_codecov: ${{ matrix.enable_codecov }}
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Install MySQL
      run: brew install ${{ matrix.formula }} && brew link --force ${{ matrix.formula }}
    - name: Start MySQL
      run: brew services start ${{ matrix.formula }}
    - name: Waiting MySQL
      run: until echo | mysql -u${{ matrix.username }}; do sleep 1; done
      timeout-minutes: 1
    - name: Set up MySQL databases and privileges
      run: |
        mysql -u${{ matrix.username }} --batch <<-'SQL'
          CREATE USER $MYSQL_USERNAME@localhost IDENTIFIED BY '$MYSQL_PASSWORD';
          CREATE DATABASE $MYSQL_DATABASE;
          GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO $MYSQL_USERNAME@localhost;
        SQL
    - name: Install PostgreSQL
      run: |
        export PATH="/usr/local/opt/postgresql/bin:$PATH" PGDATA=/tmp/postgres-test
        brew install postgresql
        initdb --locale=C -U $POSTGRES_USERNAME --pwfile=<(echo $POSTGRES_PASSWORD)
        pg_ctl start --wait
    - name: Install Redis
      run: brew install redis && brew services start redis
    - name: Start MongoDB
      run: brew services start mongodb-community
    - name: Build
      uses: SusanDoggie/swift-action@main
      with:
        action: build
    - name: Run tests
      uses: SusanDoggie/swift-action@main
      with:
        action: test
      env:
        MYSQL_HOST: localhost
        POSTGRES_HOST: localhost
        REDIS_HOST: localhost
        MONGO_HOST: localhost
    - uses: codecov/codecov-action@v1
      if: ${{ matrix.enable_codecov }}
  ubuntu_swift_latest:
    container: 
      image: docker://swift:${{ matrix.image }}
    runs-on: ubuntu-latest
    services:
      mysql:
        image: ${{ matrix.mysql_image }}
        ports: 
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: ${{ env.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
      postgres:
        image: postgres
        ports: 
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DATABASE }}
      redis:
        image: redis
        ports: 
          - 6379:6379
      mongo: 
        image: mongo
        ports: 
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_DATABASE }}
    strategy:
      fail-fast: false
      matrix:
        image: [xenial, bionic, focal]
        mysql_image:
          - mysql:5.7
          - mysql:8.0
          - mariadb
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Prepare		
      run: apt-get update
    - name: Install libmongoc
      run: apt-get install -y libmongoc-1.0-0 libssl-dev
    - name: Install sqlite3
      run: apt-get install -y libsqlite3-dev
    - name: Build
      uses: SusanDoggie/swift-action@main
      with:
        action: build
    - name: Run tests
      uses: SusanDoggie/swift-action@main
      with:
        action: test
      env:
        MYSQL_HOST: mysql
        POSTGRES_HOST: postgres
        REDIS_HOST: redis
        MONGO_HOST: mongo
  linux_swift_latest:
    container:
      image: docker://swift:${{ matrix.image }}
    runs-on: ubuntu-latest
    services:
      mysql:
        image: ${{ matrix.mysql_image }}
        ports: 
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: ${{ env.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
      postgres:
        image: postgres
        ports: 
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DATABASE }}
      redis:
        image: redis
        ports: 
          - 6379:6379
      mongo: 
        image: mongo
        ports: 
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_DATABASE }}
    strategy:
      fail-fast: false
      matrix:
        image: [centos8, amazonlinux2]
        mysql_image:
          - mysql:5.7
          - mysql:8.0
          - mariadb
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Prepare		
      run: yum update -y
    - name: Install libmongoc
      run: yum install -y mongo-c-driver openssl-devel
    - name: Install sqlite3
      run: yum install -y sqlite-devel
    - name: Build
      uses: SusanDoggie/swift-action@main
      with:
        action: build
    - name: Run tests
      uses: SusanDoggie/swift-action@main
      with:
        action: test
      env:
        MYSQL_HOST: mysql
        POSTGRES_HOST: postgres
        REDIS_HOST: redis
        MONGO_HOST: mongo
  ubuntu_swift_nightly:
    container:
      image: docker://swiftlang/swift:${{ matrix.image }}
    runs-on: ubuntu-latest
    services:
      mysql:
        image: ${{ matrix.mysql_image }}
        ports: 
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: ${{ env.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
      postgres:
        image: postgres
        ports: 
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DATABASE }}
      redis:
        image: redis
        ports: 
          - 6379:6379
      mongo: 
        image: mongo
        ports: 
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_DATABASE }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        image: [nightly-xenial, nightly-bionic, nightly-focal]
        mysql_image:
          - mysql:5.7
          - mysql:8.0
          - mariadb
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Prepare		
      run: apt-get update
    - name: Install libmongoc
      run: apt-get install -y libmongoc-1.0-0 libssl-dev
    - name: Install sqlite3
      run: apt-get install -y libsqlite3-dev
    - name: Build
      uses: SusanDoggie/swift-action@main
      with:
        action: build
    - name: Run tests
      uses: SusanDoggie/swift-action@main
      with:
        action: test
      env:
        MYSQL_HOST: mysql
        POSTGRES_HOST: postgres
        REDIS_HOST: redis
        MONGO_HOST: mongo
  linux_swift_nightly:
    container:
      image: docker://swiftlang/swift:${{ matrix.image }}
    runs-on: ubuntu-latest
    services:
      mysql:
        image: ${{ matrix.mysql_image }}
        ports: 
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: ${{ env.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
      postgres:
        image: postgres
        ports: 
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DATABASE }}
      redis:
        image: redis
        ports: 
          - 6379:6379
      mongo: 
        image: mongo
        ports: 
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_DATABASE }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        image: [nightly-centos8, nightly-amazonlinux2]
        mysql_image:
          - mysql:5.7
          - mysql:8.0
          - mariadb
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Prepare		
      run: yum update -y
    - name: Install libmongoc
      run: yum install -y mongo-c-driver openssl-devel
    - name: Install sqlite3
      run: yum install -y sqlite-devel
    - name: Build
      uses: SusanDoggie/swift-action@main
      with:
        action: build
    - name: Run tests
      uses: SusanDoggie/swift-action@main
      with:
        action: test
      env:
        MYSQL_HOST: mysql
        POSTGRES_HOST: postgres
        REDIS_HOST: redis
        MONGO_HOST: mongo
