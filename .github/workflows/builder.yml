name: Builder
on: [push, pull_request]
env:
  MYSQL_HOST: mysql
  MYSQL_USER: root
  MYSQL_DATABASE: test
  MYSQL_PASSWORD: password
  POSTGRES_HOST: postgres
  POSTGRES_USER: postgre
  POSTGRES_PASSWORD: postgre
  REDIS_HOST: redis
  MONGO_HOST: mongo
jobs:
  macos:
    name: ${{ matrix.name }}
    runs-on: macOS-latest
    strategy:
      matrix:
        name: [macOS, macOS(SwiftPM)]
        include:
          - name: macOS
            use_xcodebuild: true
            sdk: macosx
            destination: 'platform=macOS'
            enable_codecov: true
          - name: macOS(SwiftPM)
            use_xcodebuild: false
    env:
      use_xcodebuild: ${{ matrix.use_xcodebuild }}
      sdk: ${{ matrix.sdk }}
      destination: ${{ matrix.destination }}
      enable_codecov: ${{ matrix.enable_codecov }}
      MYSQL_HOST: localhost
      POSTGRES_HOST: localhost
      REDIS_HOST: localhost
      MONGO_HOST: localhost
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Install mysql
      run: brew install mariadb && brew link --force mariadb
    - name: Start MySQL server
      run: brew services start mariadb
    - name: Wait for MySQL server to be ready
      run: until echo | mysql -u${{ MYSQL_USER }}; do sleep 1; done
      timeout-minutes: 5
    - name: Set up MySQL databases and privileges
      run: |
          mysql -u${{ MYSQL_USER }} --batch <<-'SQL'
              CREATE USER ${{ MYSQL_USER }}@localhost IDENTIFIED BY '${{ MYSQL_PASSWORD }}';
              CREATE DATABASE ${{ MYSQL_DATABASE }};
              GRANT ALL PRIVILEGES ON ${{ MYSQL_DATABASE }}.* TO ${{ MYSQL_USER }}@localhost;
          SQL
    - name: Install postgresql
      run: |
          export PATH="/usr/local/opt/postgresql/bin:$PATH"
          brew install postgresql
          initdb --locale=C -U ${{ POSTGRES_USER }} --pwfile=<(echo ${{ POSTGRES_PASSWORD }})
          pg_ctl start --wait
    - name: Install redis
      run: brew install redis
    - name: Build
      uses: SusanDoggie/swift-action@main
      with:
        action: build
    - name: Run tests
      uses: SusanDoggie/swift-action@main
      with:
        action: test
    - uses: codecov/codecov-action@v1
      if: ${{ matrix.enable_codecov }}
  ubuntu_swift_latest:
    name: latest-${{ matrix.image }}
    container: 
      image: docker://swift:${{ matrix.image }}
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql
      postgres:
        image: postgres
      redis:
        image: redis
      mongo: 
        image: mongo
    strategy:
      matrix:
        image: [xenial, bionic, focal]
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Prepare		
      run: apt-get update
    - name: Install libmongoc
      run: apt-get install -y libmongoc-1.0-0 libbson-1.0-0 libssl-dev
    - name: Install sqlite3
      run: apt-get install -y libsqlite3-dev
    - name: Build
      uses: SusanDoggie/swift-action@main
      with:
        action: build
    - name: Run tests
      uses: SusanDoggie/swift-action@main
      with:
        action: test
  ubuntu_swift_nightly:
    name: ${{ matrix.image }}
    container:
      image: docker://swiftlang/swift:${{ matrix.image }}
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql
      postgres:
        image: postgres
      redis:
        image: redis
      mongo: 
        image: mongo
    continue-on-error: true
    strategy:
      matrix:
        image: [nightly-xenial, nightly-bionic, nightly-focal]
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Prepare		
      run: apt-get update
    - name: Install libmongoc
      run: apt-get install -y libmongoc-1.0-0 libbson-1.0-0 libssl-dev
    - name: Install sqlite3
      run: apt-get install -y libsqlite3-dev
    - name: Build
      uses: SusanDoggie/swift-action@main
      with:
        action: build
    - name: Run tests
      uses: SusanDoggie/swift-action@main
      with:
        action: test
